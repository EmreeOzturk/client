services:
  # MongoDB Database
  mongodb:
    image: mongo:8.0.11
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongodb/mongodb.key
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    ports:
      - "127.0.0.1:27017:27017"  # Sadece localhost'tan eriÅŸim
    volumes:
      - mongodb_data:/data/db
      - ./mongodb.key:/etc/mongodb/mongodb.key:ro
    user: "999:999"
    networks:
      - app-network

  # Express API Backend
  api:
    build:
      context: ./express-js-on-vercel
      dockerfile: Dockerfile
    container_name: express-api
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/wert_app?authSource=admin&directConnection=true
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://${DOMAIN_NAME}
    expose:
      - "3001"
    depends_on:
      - mongodb
    networks:
      - app-network
    volumes:
      - ./express-js-on-vercel/.env:/app/.env:ro

  # React Frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: react-client
    restart: always
    expose:
      - "80"
    depends_on:
      - api
    networks:
      - app-network
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_BASE_URL=https://${DOMAIN_NAME}

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - client
      - api
    networks:
      - app-network

  # Let's Encrypt Certbot
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}

  # MongoDB Replica Set Initialization
  mongo-init:
    image: mongo:8.0.11
    container_name: mongo-init
    restart: "no"
    depends_on:
      - mongodb
    command: >
      bash -c "
        sleep 10 &&
        mongosh --host mongodb:27017 -u admin -p ${MONGODB_PASSWORD} --authenticationDatabase admin --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongodb:27017\" }
            ]
          });
        ' &&
        echo 'MongoDB replica set initialized'
      "
    networks:
      - app-network

volumes:
  mongodb_data:
    driver: local

networks:
  app-network:
    driver: bridge 